name: CI - Fast

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# FIXME: add no-openmp, and maybe -DCMAKE_BUILD_TYPE=Debug jobs

jobs:
  linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: GNU12,  CC: gcc-12,   CXX: g++-12 }
          - { compiler: LLVM14, CC: clang-14, CXX: clang++-14 }
        flavor: [ RelWithDebInfo, Release ]
    container: debian:unstable-slim
    steps:
      - name: Configure APT
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # Paper over occasional network flakiness of some mirrors.
          echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80retry
          # Do not install recommended packages
          echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/80recommends
          # Do not install suggested packages
          echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/80suggests
          # Assume yes
          echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/80forceyes
          # Fix broken packages
          echo 'APT::Get::Fix-Missing "true";' > /etc/apt/apt.conf.d/80fixmissing
      - name: Install/Update necessary packages
        run: |
          rm -rf /var/lib/apt/lists/*;
          apt-get update;
          apt-get upgrade;
          apt-get install ca-certificates \
                          clang++-14 \
                          cmake \
                          g++-12 \
                          gcc \
                          gcc-12 \
                          git \
                          googletest \
                          libjpeg-dev \
                          libomp-14-dev \
                          libpugixml-dev \
                          libxml2-utils \
                          make \
                          ninja-build \
                          zlib1g-dev;
          apt-get clean;
          dpkg-divert --add --rename --divert /usr/bin/ld.original /usr/bin/ld;
          ln -s /usr/bin/ld.gold /usr/bin/ld;
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
        with:
          path: ''
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          "${SRC_DIR}/.ci/ci-script.sh";
  windows-msys2:
    name: ${{ matrix.os }}.${{ matrix.msys2.msystem }}.${{ matrix.compiler.compiler }}.${{ matrix.flavor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        msys2:
          - { msystem: MINGW64, arch: x86_64       }
          - { msystem: MINGW32, arch: i686         }
          - { msystem: CLANG64, arch: clang-x86_64 }
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        flavor: [ RelWithDebInfo, Release ]
        exclude:
          - os: windows-latest
            compiler: { compiler: LLVM, CC: clang, CXX: clang++ }
            msys2: { msystem: MINGW64, arch: x86_64       }
          - os: windows-latest
            compiler: { compiler: LLVM, CC: clang, CXX: clang++ }
            msys2: { msystem: MINGW32, arch: i686         }
          - os: windows-latest
            compiler: { compiler: GNU,  CC: gcc,   CXX: g++ }
            msys2: { msystem: CLANG64, arch: clang-x86_64 }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2.msystem }}
          install: pacman-mirrors bash git base-devel mingw-w64-${{ matrix.msys2.arch }}-toolchain mingw-w64-${{ matrix.msys2.arch }}-cmake mingw-w64-${{ matrix.msys2.arch }}-ninja mingw-w64-${{ matrix.msys2.arch }}-libxml2 mingw-w64-${{ matrix.msys2.arch }}-pugixml mingw-w64-${{ matrix.msys2.arch }}-libjpeg-turbo mingw-w64-${{ matrix.msys2.arch }}-zlib
          update: true
      - name: Build And Test
        env:
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh;
  macOS:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}.${{ matrix.xcode }}.targeting.OSX.${{ matrix.deployment_target }}.${{ matrix.flavor }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11 ]
        xcode: [ 13.2.1 ] # LLVM12
        deployment_target: [ 13.2.1, 10.7 ]
        compiler:
          - { compiler: XCode, CC: cc, CXX: c++ }
        flavor: [ RelWithDebInfo, Release ]
    steps:
      - uses: actions/checkout@v2
        name: Fetch/Checkout RawSpeed git repo
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd .ci
          brew unlink git@2.35.1
          brew bundle --verbose
      - name: Build And Test
        env:
          DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment_target }}
          CC: ${{ matrix.compiler.CC }}
          CXX: ${{ matrix.compiler.CXX }}
          CFLAGS: -mmacosx-version-min=${{ matrix.deployment_target }}
          CXXFLAGS: -mmacosx-version-min=${{ matrix.deployment_target }}
          SRC_DIR: ${{ github.workspace }}
          BUILD_DIR: ${{ github.workspace }}/../rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/../rawspeed-install
          ECO: -DALLOW_DOWNLOADING_GOOGLETEST=ON
          FLAVOR: ${{ matrix.flavor }}
          TARGET: build
        run: |
          if [[ "$MACOSX_DEPLOYMENT_TARGET" == "10.7" ]]; then
            export CXXFLAGS="$CXXFLAGS -stdlib=libc++";
          fi
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./.ci/ci-script.sh;
