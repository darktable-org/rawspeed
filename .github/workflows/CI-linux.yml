on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      distro:
        required: true
        type: string
      compiler-family:
        required: true
        type: string
      compiler-version:
        required: true
        type: string
      compiler-CC:
        required: true
        type: string
      compiler-CXX:
        required: true
        type: string
      compiler-GCOV:
        type: string
      compiler-CLANG_TIDY:
        type: string
      flavor:
        required: true
        type: string
      ECO:
        type: string
    secrets:
      SONAR_TOKEN:
      SONAR_PROJECT_KEY:
      SONAR_ORGANIZATION:

env:
  RPUU_DST: ${{ github.workspace }}/raw-camera-samples/raw.pixls.us-unique

jobs:
  linux:
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472
    name: ${{ inputs.distro }}.${{ inputs.compiler-family }}${{ inputs.compiler-version }}.${{ inputs.flavor }}
    container:
      image: ${{ inputs.distro }}
      options: --tmpfs /tmp:exec --tmpfs /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}:exec
    steps:
      - name: Configure APT
        run: |
          set -xe
          tee /etc/dpkg/dpkg.cfg.d/force-unsafe-io > /dev/null <<EOT
          force-unsafe-io
          EOT
          tee /etc/apt/apt.conf.d/tmpfs > /dev/null <<EOT
          Dir::Cache::Archives "/tmp/apt/archives";
          APT::ExtractTemplates::TempDir "/tmp/apt/temp";
          EOT
          mkdir -p /tmp/apt/archives
          tee /etc/apt/apt.conf.d/80retry > /dev/null <<EOT
          Acquire::Retries "10";
          EOT
          tee /etc/apt/apt.conf.d/80recommends > /dev/null <<EOT
          APT::Install-Recommends "false";
          EOT
          tee /etc/apt/apt.conf.d/80suggests > /dev/null <<EOT
          APT::Install-Suggests "false";
          EOT
          tee /etc/apt/apt.conf.d/80forceyes > /dev/null <<EOT
          APT::Get::Assume-Yes "true";
          EOT
          tee /etc/apt/apt.conf.d/80fixmissing > /dev/null <<EOT
          APT::Get::Fix-Missing "true";
          EOT
      - name: Update base packages
        env:
          DEBIAN_FRONTEND: noninteractive
          COMPILER_FAMILY: ${{ inputs.compiler-family }}
          FLAVOR: ${{ inputs.flavor }}
        run: |
          set -xe
          rm -rf /var/lib/apt/lists/*
          apt-get update
          apt-get install eatmydata
          eatmydata apt-get upgrade
      - name: Install necessary packages
        env:
          DEBIAN_FRONTEND: noninteractive
          COMPILER_FAMILY: ${{ inputs.compiler-family }}
          FLAVOR: ${{ inputs.flavor }}
        run: |
          set -xe
          eatmydata apt-get install ca-certificates \
                                    cmake \
                                    git \
                                    googletest \
                                    libjpeg-dev \
                                    libpugixml-dev \
                                    libxml2-utils \
                                    ninja-build \
                                    zlib1g-dev
          if [ "$COMPILER_FAMILY" = "GNU" ]; then
            eatmydata apt-get install g++-${{ inputs.compiler-version }} \
                                      gcc \
                                      gcc-${{ inputs.compiler-version }}
          fi
          if [ "$COMPILER_FAMILY" = "LLVM" ]; then
            eatmydata apt-get install clang-${{ inputs.compiler-version }} \
                                      libomp-${{ inputs.compiler-version }}-dev
          fi
          if [ "$FLAVOR" = "Coverage" ]; then
            eatmydata apt-get install rsync
          fi
          if [ "$FLAVOR" = "ClangTidy" ]; then
            eatmydata apt-get install clang-tidy-${{ inputs.compiler-version }}
          fi
          if [ "$FLAVOR" = "ClangStaticAnalysis" ]; then
            eatmydata apt-get install curl \
                                      libxml2-dev \
                                      libxslt1-dev \
                                      make \
                                      python3-dev \
                                      python3-lxml \
                                      python3-pip-whl \
                                      python3-portalocker \
                                      python3-psutil \
                                      python3-venv \
                                      python3-virtualenv \
                                      python3-wheel \
                                      python3-yaml
          fi
          eatmydata apt-get clean
          dpkg-divert --add --rename --divert /usr/bin/ld.original /usr/bin/ld
          if [ "$FLAVOR" = "ClangStaticAnalysis" ]; then
            ln -s /usr/bin/${{ inputs.compiler-CC  }} /usr/local/bin/clang
            ln -s /usr/bin/${{ inputs.compiler-CXX }} /usr/local/bin/clang++
            ln -s /usr/bin/${{ inputs.compiler-CC  }} /usr/local/bin/gcc
            ln -s /usr/bin/${{ inputs.compiler-CXX }} /usr/local/bin/g++
            ln -s /usr/bin/${{ inputs.compiler-CC  }} /usr/local/bin/x86_64-linux-gnu-gcc
            ln -s /usr/bin/${{ inputs.compiler-CXX }} /usr/local/bin/x86_64-linux-gnu-g++
          fi
          ln -s /usr/bin/ld.gold /usr/bin/ld
      - name: Configure git
        run: |
          set -xe
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - uses: actions/checkout@v3
        name: Fetch/Checkout RawSpeed git repo
        with:
          path: 'rawspeed'
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - if: inputs.flavor == 'Coverage'
        name: Fetch raw.pixls.us masterset digest
        env:
          RPUU_DST: ${{ env.RPUU_DST }}
        id: fetch-rpuu-digest
        run: |
          set -xe
          mkdir -p ${RPUU_DST}
          rsync -vvrLcW --preallocate --delete --compress --compress-level=1 --stats --progress rsync://raw.pixls.us/data-unique/filelist.sha1 ${RPUU_DST}/
          echo "::set-output name=rpuu-digest-hash::$(sha512sum ${RPUU_DST}/filelist.sha1 | awk '{print $1}')"
      - if: inputs.flavor == 'Coverage'
        name: Cache raw.pixls.us masterset
        uses: actions/cache@v3
        with:
          path: ${{ env.RPUU_DST }}
          key: raw.pixls.us-masterset-${{ steps.fetch-rpuu-digest.outputs.rpuu-digest-hash }}
      - if: inputs.flavor == 'Coverage'
        name: Fetch/update raw.pixls.us masterset
        env:
          RPUU_DST: ${{ env.RPUU_DST }}
        run: |
          set -xe
          rsync -vvrLcW --preallocate --delete --compress --compress-level=1 --stats --progress rsync://raw.pixls.us/data-unique/ ${RPUU_DST}/
          cd ${RPUU_DST} && sha1sum -c --strict filelist.sha1
      - if: inputs.flavor == 'ClangStaticAnalysis'
        name: Fetch/Checkout CodeChecker git repo (for clang static analysis)
        uses: actions/checkout@v3
        with:
          repository: 'Ericsson/codechecker'
          path: 'codechecker'
          fetch-depth: '1'
      - if: inputs.flavor == 'ClangStaticAnalysis'
        name: Install CodeChecker (for clang static analysis)
        env:
          CC: ${{ inputs.compiler-CC }}
          CXX: ${{ inputs.compiler-CXX }}
        run: |
          set -xe
          cd codechecker
          make venv
          . $PWD/venv/bin/activate
          BUILD_LOGGER_64_BIT_ONLY=YES BUILD_UI_DIST=NO make package
          export PATH="$PWD/build/CodeChecker/bin:$PATH"
      - if: inputs.flavor == 'CodeQLAnalysis'
        name: Initialize CodeQL (for CodeQL static analysis)
        uses: github/codeql-action/init@v2
        with:
          languages: cpp
      - if: inputs.flavor == 'SonarCloudStaticAnalysis' && github.repository == 'darktable-org/rawspeed' && github.event_name != 'pull_request' && github.ref_type == 'branch' && github.ref_name == 'develop'
        name: Set up JDK 11 (for SonarCloud static analysis)
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11
      - if: inputs.flavor == 'SonarCloudStaticAnalysis' && github.repository == 'darktable-org/rawspeed' && github.event_name != 'pull_request' && github.ref_type == 'branch' && github.ref_name == 'develop'
        name: Download and set up sonar-scanner (for SonarCloud static analysis)
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          set -xe
          rm -rf /var/lib/apt/lists/*
          eatmydata apt-get update
          eatmydata apt-get install curl unzip
          eatmydata apt-get clean
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Configure
        env:
          CC: ${{ inputs.compiler-CC }}
          CXX: ${{ inputs.compiler-CXX }}
          CLANG_TIDY: ${{ inputs.compiler-CLANG_TIDY }}
          GCOV: ${{ inputs.compiler-GCOV }}
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          RPUU_DST: ${{ env.RPUU_DST }}
          ECO: ${{ inputs.ECO }} -DALLOW_DOWNLOADING_GOOGLETEST=ON -DALLOW_DOWNLOADING_GOOGLEBENCHMARK=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=${{ inputs.flavor == 'ClangStaticAnalysis' || inputs.flavor == 'SonarCloudStaticAnalysis' }} -DUSE_CLANG_TIDY=${{ inputs.flavor == 'ClangTidy' }} -DRAWSPEED_ENABLE_SAMPLE_BASED_TESTING=${{ inputs.flavor == 'Coverage' }}
          FLAVOR: ${{ inputs.flavor }}
          TARGET: configure
        run: |
          set -xe
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          export ECO="${ECO} -DRAWSPEED_REFERENCE_SAMPLE_ARCHIVE=${RPUU_DST}"
          if [ "$FLAVOR" = "ClangTidy" -o "$FLAVOR" = "ClangStaticAnalysis" -o "$FLAVOR" = "CodeQLAnalysis" -o "$FLAVOR" = "SonarCloudStaticAnalysis" ]; then
            export ECO="${ECO} -DCMAKE_C_FLAGS_RELWITHDEBINFO=-UNDEBUG -DCMAKE_CXX_FLAGS_RELWITHDEBINFO=-UNDEBUG"
          fi
          "${SRC_DIR}/.ci/ci-script.sh"
      - name: Build
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: build
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - name: Test
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: test
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - if: inputs.flavor == 'Coverage'
        name: Collect source coverage data
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: coverage
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - if: inputs.flavor == 'Coverage'
        name: Test (integration)
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: test_integration
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - if: inputs.flavor == 'Coverage'
        name: Collect source coverage (integration) data
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: coverage_integration
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - name: Install
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          INSTALL_PREFIX: ${{ github.workspace }}/rawspeed-install
          TARGET: install
        run: |
          set -xe
          "${SRC_DIR}/.ci/ci-script.sh"
      - if: inputs.flavor == 'ClangStaticAnalysis'
        name: Perform clang static analysis
        env:
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
          CC: ${{ inputs.compiler-CC }}
          CXX: ${{ inputs.compiler-CXX }}
        run: |
          set -xe
          . "$PWD//codechecker/venv/bin/activate"
          export PATH="$PWD//codechecker/build/CodeChecker/bin:$PATH"
          CodeChecker check --logfile "${BUILD_DIR}/compile_commands.json" --analyzers clangsa --jobs "$(nproc --all)" --file "${SRC_DIR}/*" --disable deadcode.DeadStores
      - if: inputs.flavor == 'CodeQLAnalysis'
        name: Perform CodeQL static analysis
        uses: github/codeql-action/analyze@v2
      - if: inputs.flavor == 'SonarCloudStaticAnalysis' && github.repository == 'darktable-org/rawspeed' && github.event_name != 'pull_request' && github.ref_type == 'branch' && github.ref_name == 'develop'
        name: Perform SonarCloud static analysis
        env:
          SONAR_SERVER_URL: "https://sonarcloud.io"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SRC_DIR: ${{ github.workspace }}/rawspeed
          BUILD_DIR: ${{ github.workspace }}/rawspeed-build
        run: |
          set -xe
          cd "${SRC_DIR}"
          sonar-scanner --define project.settings="${SRC_DIR}/.ci/sonar-project.properties" --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.projectKey="${{ secrets.SONAR_PROJECT_KEY }}" --define sonar.organization="${{ secrets.SONAR_ORGANIZATION }}" --define sonar.cfamily.compile-commands="${BUILD_DIR}/compile_commands.json" --define sonar.cfamily.threads="$(nproc --all)" --define sonar.cfamily.cache.enabled=false
      - if: inputs.flavor == 'Coverage'
        name: Upload coverage to Codecov (unit tests)
        uses: codecov/codecov-action@v3
        env:
          OS: linux
          ARCH: x86_64
          CXX: ${{ inputs.compiler-family }}
          JOB_NAME: ${{ inputs.os }}.${{ inputs.compiler-family }}.${{ inputs.flavor }}
        with:
          env_vars: OS,ARCH,CXX
          flags: unittests
          name: ${JOB_NAME}.Unittests
          root_dir: ${{ github.workspace }}/rawspeed
          directory: ${{ github.workspace }}/rawspeed-build/gcov-reports-unittest
          fail_ci_if_error: true
      - if: inputs.flavor == 'Coverage'
        name: Upload coverage to Codecov (integration)
        uses: codecov/codecov-action@v3
        env:
          OS: linux
          ARCH: x86_64
          CXX: ${{ inputs.compiler-family }}
          JOB_NAME: ${{ inputs.os }}.${{ inputs.compiler-family }}.${{ inputs.flavor }}
        with:
          env_vars: OS,ARCH,CXX
          flags: integration,rpu_u
          name: ${JOB_NAME}.Integration
          root_dir: ${{ github.workspace }}/rawspeed
          directory: ${{ github.workspace }}/rawspeed-build/gcov-reports-rsa
          fail_ci_if_error: true
